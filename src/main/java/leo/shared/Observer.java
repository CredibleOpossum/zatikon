///////////////////////////////////////////////////////////////////////
// Name: Observer
// Desc: An interface for observing games
// Date: 6/18/2003 - Gabe Jones
// TODO:
///////////////////////////////////////////////////////////////////////
package leo.shared;

// imports

import java.util.Vector;

public interface Observer {

    /////////////////////////////////////////////////////////////////
    // Select a unit
    /////////////////////////////////////////////////////////////////
    void selectUnit(Unit unit);


    /////////////////////////////////////////////////////////////////
    // End the game
    /////////////////////////////////////////////////////////////////
    void endGame(Castle winner);


    /////////////////////////////////////////////////////////////////
    // Unit Effects
    /////////////////////////////////////////////////////////////////
    void unitEffect(Unit target, int effect);


    /////////////////////////////////////////////////////////////////
    // Attack animation
    /////////////////////////////////////////////////////////////////
    void attack(Unit attacker, Unit victim, short damage, int type);


    /////////////////////////////////////////////////////////////////
    // Unit damaged
    /////////////////////////////////////////////////////////////////
    void unitDamaged(Unit source, Unit damagedUnit, short amount);


    /////////////////////////////////////////////////////////////////
    // Play a sound
    /////////////////////////////////////////////////////////////////
    void playSound(short sound);

    /////////////////////////////////////////////////////////////////
    // Draw an image
    /////////////////////////////////////////////////////////////////
    void imageDraw(Unit unit, short location, int image, int duration);

    /////////////////////////////////////////////////////////////////
    // Ability used
    /////////////////////////////////////////////////////////////////
    void abilityUsed(short source, short damagedUnit, int image);


    /////////////////////////////////////////////////////////////////
    // Castle addition
    /////////////////////////////////////////////////////////////////
    void castleAddition(Unit unit);


    /////////////////////////////////////////////////////////////////
    // Someone's castle needs refreshing!
    /////////////////////////////////////////////////////////////////
    void castleRefresh(Castle castle);


    /////////////////////////////////////////////////////////////////
    // Area effect
    /////////////////////////////////////////////////////////////////
    void areaEffect(short source, short destination, int type, Unit victim);


    /////////////////////////////////////////////////////////////////
    // Fireball!
    /////////////////////////////////////////////////////////////////
    void fireball(short source, short destination, int image, Vector<Unit> victims, Vector<Short> damages, short type);


    /////////////////////////////////////////////////////////////////
    // Lightning!
    /////////////////////////////////////////////////////////////////
    void lightning(short source, short destination);


    /////////////////////////////////////////////////////////////////
    // Text!
    /////////////////////////////////////////////////////////////////
    void text(String text);


    /////////////////////////////////////////////////////////////////
    // Something dies
    /////////////////////////////////////////////////////////////////
    void death(Unit victim);


    /////////////////////////////////////////////////////////////////
    // Draw game
    /////////////////////////////////////////////////////////////////
    void drawGame();


    /////////////////////////////////////////////////////////////////
    // Misc
    /////////////////////////////////////////////////////////////////
    void allySurrendered();

    void enemySurrendered();
}
